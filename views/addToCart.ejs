<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <link rel="stylesheet" href="/css/navbar.css">
    <title>cart</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
    <style>
        .cart-container {
            max-width: 900px;
            margin: auto;
            background: #fff;
            padding: 20px;
            font-family: cursive;
            overflow: hidden;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        td {
            border-bottom: 1px solid #ddd;
            text-align: center;
        }

        th {
            padding: 25px;
            background: #eee;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }

        img {
            padding: 10px;
            height: 80px;
            width: 90px;
            margin-top: 20px;
            margin-bottom: 20px;
            margin-right: 20px;
            border: 2px solid #eee;
            border-radius: 10px;
        }

        .quantity {
            display: flex;
        }

        .quantity button {
            font-size: 20px;
            width: 27px;
            height: auto;
            text-align: center;
            background-color: white;
        }

        .input-box {
            width: 50px;
            text-align: center;
            border: 3px solid #3498db;
            padding: 8px;
            font-size: 16px;
        }

        .plus {
            border: 3px solid #3498db;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
            border-left: none;
        }

        .minus {
            border: 3px solid #3498db;
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
            border-right: none;
        }

        .btn input {
            font-family: cursive;
            border: 2px solid #eee;
            margin-top: 30px;
            margin-right: 10px;
            padding: 5px;
            border-radius: 7px;
        }

        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .Apply,
        .UC {
            justify-content: space-between;
            font-family: cursive;
            background-color: #3498db;
            border-radius: 7px;
            border: none;
            color: #eee;
            height: 30px;
            width: fit-content;
        }

        .CS {
            justify-content: space-between;
            font-family: cursive;
            border-radius: 7px;
            border: none;
            height: 30px;
            width: fit-content;
        }

        .btn {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn button {
            margin-top: 30px;
            margin-right: 10px;
            padding: 5px;
        }

        .Cart-info {
            width: fit-content;
            margin-top: 30px;
            margin-bottom: 30px;
            padding: 5px;
            border-radius: 5px;
            border: 2px solid #eee;
            /* float: right; */
        }

        .Cart-info button {
            font-family: cursive;
            background-color: rgb(255, 225, 0);
            border: none;
            border-radius: 8px;
            width: 300px;
            height: 40px;
            margin-right: 10px;
            margin-left: 10px;
        }

        .details {
            margin-right: 10px;
            margin-left: 10px;
            margin-top: 5px;

        }

        .amount {
            margin-right: 10px;
            margin-left: 10px;
        }

        .align {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .decrease-btn,
        .increase-btn {
            padding: 7px 16px;
            font-size: 19px;
            outline: none;
            border: none;
            border-radius: 7px;
            background-color: #efdada;
        }

        .removeFromCart {
            padding: 7px;
            border: none;
            border-radius: 4px;
            color: #585a52;
        }

        .download-btn {
            font-family: cursive;
            background-color: rgb(255, 225, 0);
            border: none;
            border-radius: 8px;
            width: 300px;
            height: 40px;
            margin-right: 10px;
            margin-left: 10px;
        }

        .adminBtn {
            border: 2px solid #eee;
        }

        @media(max-width:768px) {
            .cart-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
        }
    </style>
</head>

<body>
    <%- include('common/navbar.ejs') %>
        <div class="cart-container">
            <h2>Your Cart</h2>
            <table>
                <thead>
                    <tr>
                        <th>Product</th>
                        <th></th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                        <th>QR Code</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="cart-items">
                    <% if (cart.length===0) { %>
                        <tr>
                            <td colspan="7" style="text-align: center; font-size: 18px; padding: 20px;">
                                Your cart is empty.
                            </td>
                        </tr>
                        <% } else { let subtotal=0; cart.forEach(item=> {
                            const quantity = Number(item.quantity) || 1;
                            const price = Number(item.price) || 1;
                            const itemSubtotal = quantity * price;
                            subtotal += itemSubtotal;
                            %>
                            <tr>
                                <td><img src="<%= item.image %>" alt="<%= item.name %>" width="80" /></td>
                                <td>
                                    <%= item.name %>
                                </td>
                                <td>₹<%= price.toFixed(2) %>
                                </td>
                                <td>
                                    <button class="decrease-btn" data-id="<%=item._id%>">-</button>
                                    <span id="quantity-<%= item._id %>">
                                        <%= quantity %>
                                    </span>
                                    <button class="increase-btn" data-id="<%=item._id%>">+</button>
                                </td>
                                <td>₹<%= itemSubtotal.toFixed(2) %>
                                </td>
                                <td><img src="<%= item.qrCodeUrl %>" alt="QR Code" width="60" /></td>
                                <!-- <td><button class="remove-btn" data-id="<%= item._id %>">Remove</button></td> -->
                                <td><button class="removeFromCart" data-id="<%= item._id %>">Remove</button></td>
                            </tr>
                            <% }); } %>
                </tbody>

            </table>

            <div class="btn">
                <div>
                    <button style="cursor: pointer;" class="CS" onclick="window.location.href='/alltoys'">Continue
                        Shopping</button>
                </div>
            </div>

            <% if (cart.length> 0) {
                let subtotal = 0;
                cart.forEach(item => {
                const quantity = Number(item.quantity) || 0;
                const price = Number(item.price) || 0;
                subtotal += quantity * price;
                });
                %>
                <div class="Cart-info">
                    <div class="align">
                        <div class="details">
                            <strong>Cart total</strong>
                            <p>Subtotal</p>
                            <p>Total</p>
                        </div>
                        <div class="amount">
                            <p id="subtotal-amount">₹<%= subtotal.toFixed(2) %>
                            </p>
                            <p id="total-amount">₹<%= subtotal.toFixed(2) %>
                            </p>
                        </div>
                    </div>
                    <div id="cart-data" style="display:none;" data-cart='<%= JSON.stringify(cart) %>'></div>
                    <button style="cursor: pointer;" class="download-btn">Download
                        PDF</button>
                </div>
                <div class="adminBtn">
                    <p>these two btn only for admin </p>
                    <button style="cursor: pointer;" class="download-btn">Text 1</button>
                    <br>
                    <br>
                    <button style="cursor: pointer;" class="download-btn">Text 2</button>
                </div>
                <% } %>
        </div>
        <!-- <br> -->
        <%- include('common/footer.ejs') %>
</body>

</html>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const removeButtons = document.querySelectorAll(".removeFromCart");

        removeButtons.forEach(button => {
            button.addEventListener("click", () => {
                const productId = button.getAttribute("data-id");
                removeFromCart(productId);
            });
        });
    });

    function removeFromCart(productId) {
        fetch(`/remove-from-cart/${productId}`, {
            method: 'DELETE'
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || "Failed to remove item.");
                }
            })
            .catch(err => {
                console.error("Remove error:", err);
                alert("Failed to remove item.");
            });
    }
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Retrieve cart data from the data-cart attribute of the hidden element
        const cartElement = document.getElementById('cart-data');
        const globalCartItems = JSON.parse(cartElement.getAttribute('data-cart'));

        // Attach event listener to the download button
        document.querySelector('.download-btn').addEventListener('click', () => {
            console.log("Button clicked!");
            downloadCartPDF(globalCartItems);  // Pass globalCartItems to the function
        });
    });

    async function downloadCartPDF(globalCartItems) {
        console.log("click downloadCartPDF", globalCartItems);
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        if (!globalCartItems || globalCartItems.length === 0) {
            alert("Your cart is empty.");
            return;
        }

        doc.setFontSize(18);
        doc.text("Cart Summary", 20, 20);
        doc.setFontSize(12);

        let y = 30;
        let sum = 0;
        for (let i = 0; i < globalCartItems.length; i++) {
            const item = globalCartItems[i];
            console.log("download for pdf", item);
            const subtotal = item.price * item.quantity;
            sum += subtotal;
            doc.text(`${i + 1}. ${item.name}`, 20, y);
            doc.text(`Price: ₹${item.price}`, 20, y + 8);
            doc.text(`Quantity: ${item.quantity}`, 20, y + 16);
            doc.text(`Subtotal: ₹${subtotal.toFixed(2)}`, 20, y + 24);

            try {
                const productImg = await getBase64Image(item.image);
                const qrImg = await getBase64Image(item.qrCodeUrl);

                if (productImg) doc.addImage(productImg, "JPEG", 150, y - 5, 25, 25);
                if (qrImg) doc.addImage(qrImg, "JPEG", 180, y - 5, 25, 25);
            } catch (err) {
                console.warn("Image load failed:", err);
            }

            y += 40;
            if (y > 250) {
                doc.addPage();
                y = 20;
            }
        }

        const total = sum;
        doc.setFontSize(14);
        doc.text(`Total: ₹${total.toFixed(2)}`, 20, y + 10);

        doc.save("cart-summary.pdf");
    }

    function getBase64Image(url) {
        return new Promise((resolve) => {
            const img = new Image();
            img.crossOrigin = "Anonymous";
            img.src = url;

            img.onload = () => {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                resolve(canvas.toDataURL("image/jpeg"));
            };

            img.onerror = () => resolve(null);
        });
    }



    document.addEventListener('DOMContentLoaded', () => {
        // const cartItems =<% -JSON.stringify(cart) %>

        //    increase btn functionally start here
        document.querySelectorAll('.increase-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.getAttribute('data-id');
                const quantitySpan = document.getElementById(`quantity-${id}`)
                // console.log(quantitySpan)
                let currentQty = parseInt(quantitySpan.innerText);
                // console.log(currentQty)
                currentQty += currentQty;
                location.reload();
                quantitySpan.innerText = currentQty;
                updateCartQuantity(id, currentQty);
            })
        })

        // decrement btn functionality start here
        document.querySelectorAll('.decrease-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.getAttribute('data-id');
                const quantitySpan = document.getElementById(`quantity-${id}`);
                let currentQty = parseInt(quantitySpan.innerText);
                if (currentQty > 1) {
                    currentQty--;
                    location.reload();
                }
                quantitySpan.innerText = currentQty;
                updateCartQuantity(id, currentQty);
            })
        })
    })

    function updateCartQuantity(id, quantity) {
        fetch('/update-cart', {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ id, quantity })
        })
            .then(res => res.json())
            .then(data => {
                console.log("Cart updated:", data);

            })
            .catch(err => console.error("Error updating cart:", err));
    }
</script>












<!-- <script>
    document.addEventListener('DOMContentLoaded', () => {
        // Define globalCartItems within the DOMContentLoaded event to make it accessible
        // const globalCartItems = <%= JSON.stringify(cart) %>;
        const globalCartItems = <%= cart %>;

        // Check if the download button exists
        const downloadButton = document.querySelector('.download-btn');

        // Bind the click event to the download button
        if (downloadButton) {
            downloadButton.addEventListener('click', () => {
                console.log("Button clicked!");
                downloadCartPDF(globalCartItems);  // Pass globalCartItems to the function
            });
        } else {
            console.error('Download button not found!');
        }
    });

    async function downloadCartPDF(globalCartItems) {
        console.log("click downloadCartPDF", globalCartItems);
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        if (!globalCartItems || globalCartItems.length === 0) {
            alert("Your cart is empty.");
            return;
        }

        doc.setFontSize(18);
        doc.text("Cart Summary", 20, 20);
        doc.setFontSize(12);

        let y = 30;
        let sum = 0;
        for (let i = 0; i < globalCartItems.length; i++) {
            const item = globalCartItems[i];
            console.log("download for pdf", item);
            const subtotal = item.price * item.quantity;
            sum += subtotal;
            doc.text(`${i + 1}. ${item.name}`, 20, y);
            doc.text(`Price: ₹${item.price}`, 20, y + 8);
            doc.text(`Quantity: ${item.quantity}`, 20, y + 16);
            doc.text(`Subtotal: ₹${subtotal.toFixed(2)}`, 20, y + 24);

            try {
                const productImg = await getBase64Image(item.image);
                const qrImg = await getBase64Image(item.qrCodeUrl);

                if (productImg) doc.addImage(productImg, "JPEG", 150, y - 5, 25, 25);
                if (qrImg) doc.addImage(qrImg, "JPEG", 180, y - 5, 25, 25);
            } catch (err) {
                console.warn("Image load failed:", err);
            }

            y += 40;
            if (y > 250) {
                doc.addPage();
                y = 20;
            }
        }

        const total = sum;
        doc.setFontSize(14);
        doc.text(`Total: ₹${total.toFixed(2)}`, 20, y + 10);

        doc.save("cart-summary.pdf");
    }

    function getBase64Image(url) {
        return new Promise((resolve) => {
            const img = new Image();
            img.crossOrigin = "Anonymous";
            img.src = url;

            img.onload = () => {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                resolve(canvas.toDataURL("image/jpeg"));
            };

            img.onerror = () => resolve(null);
        });
    }
</script> -->